RUN SCRIPT for RFM grid sweep for Burgers equation.

Running grid size K = 17
Training done...
Expected relative error (Train, Test): (0.039577866035538735, 0.042052138594220655)
Running grid size K = 33
Training done...
Expected relative error (Train, Test): (0.04164006338619032, 0.042686774689733094)
Running grid size K = 65
Training done...
Expected relative error (Train, Test): (0.04181519227452323, 0.04279370283858393)
Running grid size K = 129
Training done...
Expected relative error (Train, Test): (0.0417531868987906, 0.04273063649151212)
Running grid size K = 257
Training done...
Expected relative error (Train, Test): (0.0417512763070972, 0.04272425789361833)
Running grid size K = 513
Training done...
Expected relative error (Train, Test): (0.04174966039181486, 0.04272253492353037)
Running grid size K = 1025
Training done...
Expected relative error (Train, Test): (0.041749893803224726, 0.04272293197416666)
Total Script Runtime:  9785.878806829453 seconds.
The choice of RF map is shown in the function defn. below:

def rf_fourier(a, w, nu_rf=2.5e-3, al_rf=4, K_fine=1025):
    ''' 
    K_fine = 1 + 1024 # fine grid the input data is sampled from.
    Activations: id, sin, relu, sawtooth, elu, selu
    '''    
    # Derived
    w = w[:-1,:]
    w1 = w[:,0]
    # w2 = w[:,1] # second GRF not needed
    N = a.shape[0] - 1
    k = 2*np.pi*np.array([i for i in range(N//2)] + [N//2] + [ii for ii in range(-N//2 + 1,0)])
    
    # # TEST
    # inds = np.array([i for i in range(N//2)] + [N//2] + [ii for ii in range(-N//2 + 1,0)])
    # k = 2*np.pi*inds
    # k[np.abs(inds) > N//3 ] = 0
 
    # Define mapping
    # wave_func = (nu_rf*(np.abs(k)**al_rf)) * -1j*np.sign(k)   # add sawtooth activation filter maybe
    # wave_func = sawtooth(nu_rf*np.abs(k)**al_rf)   # TEST
    wave_func = act_filter(nu_rf*np.abs(k), al_rf)   # TEST
    # wave_func = sawtooth(nu_rf*(15**2+np.abs(k)**2)**(al_rf/2)) # TEST
    # aa = 1.2
    # bb = 5e-3
    # cc = 1
    # wave_func = cc*sawtooth(bb*np.abs(k))**aa  # TEST

    U = elu( (K_fine - 1)/N*np.real(ifft( wave_func*fft(w1)*fft(a[:-1]) )) )
    return np.append(U, U[0])

